{"version":3,"file":"measure.js","mappings":"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","sources":["webpack:///./measure.js"],"sourcesContent":["import Draw from '../src/ol/interaction/Draw.js';\nimport Map from '../src/ol/Map.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport View from '../src/ol/View.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {LineString, Polygon} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {getArea, getLength} from '../src/ol/sphere.js';\nimport {unByKey} from '../src/ol/Observable.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst vector = new VectorLayer({\n  source: source,\n  style: new Style({\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)',\n    }),\n    stroke: new Stroke({\n      color: '#ffcc33',\n      width: 2,\n    }),\n    image: new CircleStyle({\n      radius: 7,\n      fill: new Fill({\n        color: '#ffcc33',\n      }),\n    }),\n  }),\n});\n\n/**\n * Currently drawn feature.\n * @type {import(\"../src/ol/Feature.js\").default}\n */\nlet sketch;\n\n/**\n * The help tooltip element.\n * @type {HTMLElement}\n */\nlet helpTooltipElement;\n\n/**\n * Overlay to show the help messages.\n * @type {Overlay}\n */\nlet helpTooltip;\n\n/**\n * The measure tooltip element.\n * @type {HTMLElement}\n */\nlet measureTooltipElement;\n\n/**\n * Overlay to show the measurement.\n * @type {Overlay}\n */\nlet measureTooltip;\n\n/**\n * Message to show when the user is drawing a polygon.\n * @type {string}\n */\nconst continuePolygonMsg = 'Click to continue drawing the polygon';\n\n/**\n * Message to show when the user is drawing a line.\n * @type {string}\n */\nconst continueLineMsg = 'Click to continue drawing the line';\n\n/**\n * Handle pointer move.\n * @param {import(\"../src/ol/MapBrowserEvent\").default} evt The event.\n */\nconst pointerMoveHandler = function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  /** @type {string} */\n  let helpMsg = 'Click to start drawing';\n\n  if (sketch) {\n    const geom = sketch.getGeometry();\n    if (geom instanceof Polygon) {\n      helpMsg = continuePolygonMsg;\n    } else if (geom instanceof LineString) {\n      helpMsg = continueLineMsg;\n    }\n  }\n\n  helpTooltipElement.innerHTML = helpMsg;\n  helpTooltip.setPosition(evt.coordinate);\n\n  helpTooltipElement.classList.remove('hidden');\n};\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 15,\n  }),\n});\n\nmap.on('pointermove', pointerMoveHandler);\n\nmap.getViewport().addEventListener('mouseout', function () {\n  helpTooltipElement.classList.add('hidden');\n});\n\nconst typeSelect = document.getElementById('type');\n\nlet draw; // global so we can remove it later\n\n/**\n * Format length output.\n * @param {LineString} line The line.\n * @return {string} The formatted length.\n */\nconst formatLength = function (line) {\n  const length = getLength(line);\n  let output;\n  if (length > 100) {\n    output = Math.round((length / 1000) * 100) / 100 + ' ' + 'km';\n  } else {\n    output = Math.round(length * 100) / 100 + ' ' + 'm';\n  }\n  return output;\n};\n\n/**\n * Format area output.\n * @param {Polygon} polygon The polygon.\n * @return {string} Formatted area.\n */\nconst formatArea = function (polygon) {\n  const area = getArea(polygon);\n  let output;\n  if (area > 10000) {\n    output = Math.round((area / 1000000) * 100) / 100 + ' ' + 'km<sup>2</sup>';\n  } else {\n    output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';\n  }\n  return output;\n};\n\nfunction addInteraction() {\n  const type = typeSelect.value == 'area' ? 'Polygon' : 'LineString';\n  draw = new Draw({\n    source: source,\n    type: type,\n    style: new Style({\n      fill: new Fill({\n        color: 'rgba(255, 255, 255, 0.2)',\n      }),\n      stroke: new Stroke({\n        color: 'rgba(0, 0, 0, 0.5)',\n        lineDash: [10, 10],\n        width: 2,\n      }),\n      image: new CircleStyle({\n        radius: 5,\n        stroke: new Stroke({\n          color: 'rgba(0, 0, 0, 0.7)',\n        }),\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)',\n        }),\n      }),\n    }),\n  });\n  map.addInteraction(draw);\n\n  createMeasureTooltip();\n  createHelpTooltip();\n\n  let listener;\n  draw.on('drawstart', function (evt) {\n    // set sketch\n    sketch = evt.feature;\n\n    /** @type {import(\"../src/ol/coordinate.js\").Coordinate|undefined} */\n    let tooltipCoord = evt.coordinate;\n\n    listener = sketch.getGeometry().on('change', function (evt) {\n      const geom = evt.target;\n      let output;\n      if (geom instanceof Polygon) {\n        output = formatArea(geom);\n        tooltipCoord = geom.getInteriorPoint().getCoordinates();\n      } else if (geom instanceof LineString) {\n        output = formatLength(geom);\n        tooltipCoord = geom.getLastCoordinate();\n      }\n      measureTooltipElement.innerHTML = output;\n      measureTooltip.setPosition(tooltipCoord);\n    });\n  });\n\n  draw.on('drawend', function () {\n    measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';\n    measureTooltip.setOffset([0, -7]);\n    // unset sketch\n    sketch = null;\n    // unset tooltip so that a new one can be created\n    measureTooltipElement = null;\n    createMeasureTooltip();\n    unByKey(listener);\n  });\n}\n\n/**\n * Creates a new help tooltip\n */\nfunction createHelpTooltip() {\n  if (helpTooltipElement) {\n    helpTooltipElement.parentNode.removeChild(helpTooltipElement);\n  }\n  helpTooltipElement = document.createElement('div');\n  helpTooltipElement.className = 'ol-tooltip hidden';\n  helpTooltip = new Overlay({\n    element: helpTooltipElement,\n    offset: [15, 0],\n    positioning: 'center-left',\n  });\n  map.addOverlay(helpTooltip);\n}\n\n/**\n * Creates a new measure tooltip\n */\nfunction createMeasureTooltip() {\n  if (measureTooltipElement) {\n    measureTooltipElement.parentNode.removeChild(measureTooltipElement);\n  }\n  measureTooltipElement = document.createElement('div');\n  measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';\n  measureTooltip = new Overlay({\n    element: measureTooltipElement,\n    offset: [0, -15],\n    positioning: 'bottom-center',\n    stopEvent: false,\n    insertFirst: false,\n  });\n  map.addOverlay(measureTooltip);\n}\n\n/**\n * Let user change the geometry type.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n"],"names":["raster","TileLayer","source","OSM","VectorSource","vector","VectorLayer","style","Style","fill","Fill","color","stroke","Stroke","width","image","CircleStyle","radius","sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","map","Map","layers","target","view","View","center","zoom","on","evt","dragging","helpMsg","geom","getGeometry","Polygon","LineString","innerHTML","setPosition","coordinate","classList","remove","getViewport","addEventListener","add","typeSelect","document","getElementById","draw","addInteraction","type","value","listener","Draw","lineDash","createMeasureTooltip","parentNode","removeChild","createElement","className","Overlay","element","offset","positioning","addOverlay","createHelpTooltip","feature","tooltipCoord","output","polygon","area","getArea","Math","round","formatArea","getInteriorPoint","getCoordinates","line","length","getLength","formatLength","getLastCoordinate","setOffset","unByKey","stopEvent","insertFirst","onchange","removeInteraction"],"sourceRoot":""}