{"version":3,"file":"modify-scale-and-rotate.js","mappings":"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","sources":["webpack:///./modify-scale-and-rotate.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Draw, Modify, Translate} from '../src/ol/interaction.js';\nimport {MultiPoint, Point} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {getCenter, getHeight, getWidth} from '../src/ol/extent.js';\nimport {\n  never,\n  platformModifierKeyOnly,\n  primaryAction,\n} from '../src/ol/events/condition.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst style = new Style({\n  geometry: function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    return modifyGeometry ? modifyGeometry.geometry : feature.getGeometry();\n  },\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#ffcc33',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: '#ffcc33',\n    }),\n  }),\n});\n\nfunction calculateCenter(geometry) {\n  let center, coordinates, minRadius;\n  const type = geometry.getType();\n  if (type === 'Polygon') {\n    let x = 0;\n    let y = 0;\n    let i = 0;\n    coordinates = geometry.getCoordinates()[0].slice(1);\n    coordinates.forEach(function (coordinate) {\n      x += coordinate[0];\n      y += coordinate[1];\n      i++;\n    });\n    center = [x / i, y / i];\n  } else if (type === 'LineString') {\n    center = geometry.getCoordinateAt(0.5);\n    coordinates = geometry.getCoordinates();\n  } else {\n    center = getCenter(geometry.getExtent());\n  }\n  let sqDistances;\n  if (coordinates) {\n    sqDistances = coordinates.map(function (coordinate) {\n      const dx = coordinate[0] - center[0];\n      const dy = coordinate[1] - center[1];\n      return dx * dx + dy * dy;\n    });\n    minRadius = Math.sqrt(Math.max.apply(Math, sqDistances)) / 3;\n  } else {\n    minRadius =\n      Math.max(\n        getWidth(geometry.getExtent()),\n        getHeight(geometry.getExtent())\n      ) / 3;\n  }\n  return {\n    center: center,\n    coordinates: coordinates,\n    minRadius: minRadius,\n    sqDistances: sqDistances,\n  };\n}\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    const styles = [style];\n    const modifyGeometry = feature.get('modifyGeometry');\n    const geometry = modifyGeometry\n      ? modifyGeometry.geometry\n      : feature.getGeometry();\n    const result = calculateCenter(geometry);\n    const center = result.center;\n    if (center) {\n      styles.push(\n        new Style({\n          geometry: new Point(center),\n          image: new CircleStyle({\n            radius: 4,\n            fill: new Fill({\n              color: '#ff3333',\n            }),\n          }),\n        })\n      );\n      const coordinates = result.coordinates;\n      if (coordinates) {\n        const minRadius = result.minRadius;\n        const sqDistances = result.sqDistances;\n        const rsq = minRadius * minRadius;\n        const points = coordinates.filter(function (coordinate, index) {\n          return sqDistances[index] > rsq;\n        });\n        styles.push(\n          new Style({\n            geometry: new MultiPoint(points),\n            image: new CircleStyle({\n              radius: 4,\n              fill: new Fill({\n                color: '#33cc33',\n              }),\n            }),\n          })\n        );\n      }\n    }\n    return styles;\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4,\n  }),\n});\n\nconst defaultStyle = new Modify({source: source})\n  .getOverlay()\n  .getStyleFunction();\n\nconst modify = new Modify({\n  source: source,\n  condition: function (event) {\n    return primaryAction(event) && !platformModifierKeyOnly(event);\n  },\n  deleteCondition: never,\n  insertVertexCondition: never,\n  style: function (feature) {\n    feature.get('features').forEach(function (modifyFeature) {\n      const modifyGeometry = modifyFeature.get('modifyGeometry');\n      if (modifyGeometry) {\n        const point = feature.getGeometry().getCoordinates();\n        let modifyPoint = modifyGeometry.point;\n        if (!modifyPoint) {\n          // save the initial geometry and vertex position\n          modifyPoint = point;\n          modifyGeometry.point = modifyPoint;\n          modifyGeometry.geometry0 = modifyGeometry.geometry;\n          // get anchor and minimum radius of vertices to be used\n          const result = calculateCenter(modifyGeometry.geometry0);\n          modifyGeometry.center = result.center;\n          modifyGeometry.minRadius = result.minRadius;\n        }\n\n        const center = modifyGeometry.center;\n        const minRadius = modifyGeometry.minRadius;\n        let dx, dy;\n        dx = modifyPoint[0] - center[0];\n        dy = modifyPoint[1] - center[1];\n        const initialRadius = Math.sqrt(dx * dx + dy * dy);\n        if (initialRadius > minRadius) {\n          const initialAngle = Math.atan2(dy, dx);\n          dx = point[0] - center[0];\n          dy = point[1] - center[1];\n          const currentRadius = Math.sqrt(dx * dx + dy * dy);\n          if (currentRadius > 0) {\n            const currentAngle = Math.atan2(dy, dx);\n            const geometry = modifyGeometry.geometry0.clone();\n            geometry.scale(currentRadius / initialRadius, undefined, center);\n            geometry.rotate(currentAngle - initialAngle, center);\n            modifyGeometry.geometry = geometry;\n          }\n        }\n      }\n    });\n    return defaultStyle(feature);\n  },\n});\n\nmodify.on('modifystart', function (event) {\n  event.features.forEach(function (feature) {\n    feature.set(\n      'modifyGeometry',\n      {geometry: feature.getGeometry().clone()},\n      true\n    );\n  });\n});\n\nmodify.on('modifyend', function (event) {\n  event.features.forEach(function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    if (modifyGeometry) {\n      feature.setGeometry(modifyGeometry.geometry);\n      feature.unset('modifyGeometry', true);\n    }\n  });\n});\n\nmap.addInteraction(modify);\nmap.addInteraction(\n  new Translate({\n    condition: function (event) {\n      return primaryAction(event) && platformModifierKeyOnly(event);\n    },\n    layers: [vector],\n  })\n);\n\nlet draw; // global so we can remove it later\nconst typeSelect = document.getElementById('type');\n\nfunction addInteractions() {\n  draw = new Draw({\n    source: source,\n    type: typeSelect.value,\n  });\n  map.addInteraction(draw);\n}\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  addInteractions();\n};\n\naddInteractions();\n"],"names":["raster","TileLayer","source","OSM","VectorSource","style","Style","geometry","feature","modifyGeometry","get","getGeometry","fill","Fill","color","stroke","Stroke","width","image","CircleStyle","radius","calculateCenter","center","coordinates","minRadius","type","getType","x","y","i","getCoordinates","slice","forEach","coordinate","getCoordinateAt","getCenter","getExtent","sqDistances","map","dx","dy","Math","sqrt","max","apply","getWidth","getHeight","vector","VectorLayer","styles","result","push","Point","rsq","points","filter","index","MultiPoint","Map","layers","target","view","View","zoom","defaultStyle","Modify","getOverlay","getStyleFunction","modify","condition","event","primaryAction","platformModifierKeyOnly","deleteCondition","never","insertVertexCondition","modifyFeature","point","modifyPoint","geometry0","initialRadius","initialAngle","atan2","currentRadius","currentAngle","clone","scale","undefined","rotate","draw","on","features","set","setGeometry","unset","addInteraction","Translate","typeSelect","document","getElementById","addInteractions","Draw","value","onchange","removeInteraction"],"sourceRoot":""}