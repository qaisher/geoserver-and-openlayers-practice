{"version":3,"file":"getfeatureinfo-layers.js","mappings":"gJAiCA,MAAMA,UAA0BC,EAAAA,EAI9BC,YAAYC,GACVC,QAEA,MAAMC,EAAUF,GAA4B,GAM5CG,KAAKC,WAAa,yCAMlBD,KAAKE,WAAa,IAAIC,EAAAA,EAMtBH,KAAKI,QAAUL,EAAQM,OAASN,EAAQM,OAAS,KAMnDC,YACE,OAAON,KAAKI,QAMdG,UAAUF,GACRL,KAAKI,QAAUC,EASjBG,cAAcC,EAAMC,GAClBD,EAAKE,aAAa,eAAgBX,KAAKC,YACvC,MAAMW,EAAYH,EAAKG,UAEvB,IAAIC,EAAW,GACf,GAA+B,IAA3BJ,EAAKK,WAAWC,OAClB,OAAOF,EAET,GAAiB,eAAbD,EACF,IAAK,IAAII,EAAI,EAAGC,EAAKR,EAAKK,WAAWC,OAAQC,EAAIC,EAAID,IAAK,CACxD,MAAME,EAAQT,EAAKK,WAAWE,GAC9B,GAAIE,EAAMC,WAAaC,KAAKC,aAC1B,SAGF,MAAMC,EAAuCJ,EACvCK,EAAUb,EAAY,GAEtBc,EA3EU,SA4EVC,EAAYH,EAAaV,UAAUc,QAAQF,EAAU,IAE3D,GAAIxB,KAAKI,WAAYuB,EAAAA,EAAAA,IAAS3B,KAAKI,QAASqB,GAC1C,SAGF,MAAMG,EAAcH,EAxFF,WA0FlBF,EAAO,YAAkBK,EACzBL,EAAO,UAAgBvB,KAAKC,WAG5B,MAAM4B,EAAU,GAChBA,EAAQD,IAAeE,EAAAA,EAAAA,IACrB9B,KAAKE,WAAW6B,mBAChB/B,KAAKE,YAEP,MAAM8B,GAAYC,EAAAA,EAAAA,IAChB,CAACV,EAAO,UAAe,MACvBM,GAEFP,EAAaX,aAAa,eAAgBX,KAAKC,YAC/C,MAAMiC,GAAgBC,EAAAA,EAAAA,GACpB,GAEAH,EACAV,EACAZ,EACAV,KAAKE,YAEHgC,IACFE,EAAAA,EAAAA,IAAOvB,EAAUqB,GAIvB,GAAiB,qBAAbtB,EAAkC,CACpC,MAAMyB,GAAcF,EAAAA,EAAAA,GAClB,GACAnC,KAAKE,WAAWoC,2BAChB7B,EACA,CAAC,IACDT,KAAKE,YAEHmC,IACFxB,EAAWwB,GAGf,OAAOxB,EAST0B,qBAAqB9B,EAAMZ,GACzB,MAAME,EAAU,GAIhB,OAHIF,IACF2C,EAAAA,EAAAA,IAAOzC,EAASC,KAAKyC,eAAehC,EAAMZ,IAErCG,KAAKQ,cAAcC,EAAM,CAACV,KAIrC,QCnKA2C,MAAM,mDACHC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUC,GAEd,MAAME,GAAc,IAAIpD,GAAoBqD,aAAaH,GACzDI,SAASC,eAAe,OAAOC,UAAYJ,EAAY/B,OAAOoC,WAI9D,MAAMC,EAAgB,IAAI1D,EAAkB,CAC1CW,OAAQ,CAAC,WACR0C,aAAaH,GAChBI,SAASC,eAAe,SAASC,UAC/BE,EAAcrC,OAAOoC,WAEvB,MAAME,EAAqB,IAAI3D,EAAkB,CAC/CW,OAAQ,CAAC,gBACR0C,aAAaH,GAChBI,SAASC,eAAe,cAAcC,UACpCG,EAAmBtC,OAAOoC,gB","sources":["webpack:///../src/ol/format/WMSGetFeatureInfo.js","webpack:///./getfeatureinfo-layers.js"],"sourcesContent":["/**\n * @module ol/format/WMSGetFeatureInfo\n */\nimport GML2 from './GML2.js';\nimport XMLFeature from './XMLFeature.js';\nimport {assign} from '../obj.js';\nimport {extend, includes} from '../array.js';\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\n */\n\n/**\n * @const\n * @type {string}\n */\nconst featureIdentifier = '_feature';\n\n/**\n * @const\n * @type {string}\n */\nconst layerIdentifier = '_layer';\n\n/**\n * @classdesc\n * Format for reading WMSGetFeatureInfo format. It uses\n * {@link module:ol/format/GML2~GML2} to read features.\n *\n * @api\n */\nclass WMSGetFeatureInfo extends XMLFeature {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\n\n    /**\n     * @private\n     * @type {GML2}\n     */\n    this.gmlFormat_ = new GML2();\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n  }\n\n  /**\n   * @return {Array<string>|null} layers\n   */\n  getLayers() {\n    return this.layers_;\n  }\n\n  /**\n   * @param {Array<string>|null} layers Layers to parse.\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @private\n   */\n  readFeatures_(node, objectStack) {\n    node.setAttribute('namespaceURI', this.featureNS_);\n    const localName = node.localName;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = [];\n    if (node.childNodes.length === 0) {\n      return features;\n    }\n    if (localName == 'msGMLOutput') {\n      for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\n        const layer = node.childNodes[i];\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n\n        const layerElement = /** @type {Element} */ (layer);\n        const context = objectStack[0];\n\n        const toRemove = layerIdentifier;\n        const layerName = layerElement.localName.replace(toRemove, '');\n\n        if (this.layers_ && !includes(this.layers_, layerName)) {\n          continue;\n        }\n\n        const featureType = layerName + featureIdentifier;\n\n        context['featureType'] = featureType;\n        context['featureNS'] = this.featureNS_;\n\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        const parsers = {};\n        parsers[featureType] = makeArrayPusher(\n          this.gmlFormat_.readFeatureElement,\n          this.gmlFormat_\n        );\n        const parsersNS = makeStructureNS(\n          [context['featureNS'], null],\n          parsers\n        );\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\n        const layerFeatures = pushParseAndPop(\n          [],\n          // @ts-ignore\n          parsersNS,\n          layerElement,\n          objectStack,\n          this.gmlFormat_\n        );\n        if (layerFeatures) {\n          extend(features, layerFeatures);\n        }\n      }\n    }\n    if (localName == 'FeatureCollection') {\n      const gmlFeatures = pushParseAndPop(\n        [],\n        this.gmlFormat_.FEATURE_COLLECTION_PARSERS,\n        node,\n        [{}],\n        this.gmlFormat_\n      );\n      if (gmlFeatures) {\n        features = gmlFeatures;\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    const options = {};\n    if (opt_options) {\n      assign(options, this.getReadOptions(node, opt_options));\n    }\n    return this.readFeatures_(node, [options]);\n  }\n}\n\nexport default WMSGetFeatureInfo;\n","import WMSGetFeatureInfo from '../src/ol/format/WMSGetFeatureInfo.js';\n\nfetch('data/wmsgetfeatureinfo/osm-restaurant-hotel.xml')\n  .then(function (response) {\n    return response.text();\n  })\n  .then(function (response) {\n    // this is the standard way to read the features\n    const allFeatures = new WMSGetFeatureInfo().readFeatures(response);\n    document.getElementById('all').innerText = allFeatures.length.toString();\n\n    // when specifying the 'layers' options, only the features of those\n    // layers are returned by the format\n    const hotelFeatures = new WMSGetFeatureInfo({\n      layers: ['hotel'],\n    }).readFeatures(response);\n    document.getElementById('hotel').innerText =\n      hotelFeatures.length.toString();\n\n    const restaurantFeatures = new WMSGetFeatureInfo({\n      layers: ['restaurant'],\n    }).readFeatures(response);\n    document.getElementById('restaurant').innerText =\n      restaurantFeatures.length.toString();\n  });\n"],"names":["WMSGetFeatureInfo","XMLFeature","constructor","opt_options","super","options","this","featureNS_","gmlFormat_","GML2","layers_","layers","getLayers","setLayers","readFeatures_","node","objectStack","setAttribute","localName","features","childNodes","length","i","ii","layer","nodeType","Node","ELEMENT_NODE","layerElement","context","toRemove","layerName","replace","includes","featureType","parsers","makeArrayPusher","readFeatureElement","parsersNS","makeStructureNS","layerFeatures","pushParseAndPop","extend","gmlFeatures","FEATURE_COLLECTION_PARSERS","readFeaturesFromNode","assign","getReadOptions","fetch","then","response","text","allFeatures","readFeatures","document","getElementById","innerText","toString","hotelFeatures","restaurantFeatures"],"sourceRoot":""}