{"version":3,"file":"topolis.js","mappings":"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","sources":["webpack:///./topolis.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport MousePosition from '../src/ol/control/MousePosition.js';\nimport View from '../src/ol/View.js';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Stroke,\n  Style,\n  Text,\n} from '../src/ol/style.js';\nimport {Draw, Snap} from '../src/ol/interaction.js';\nimport {LineString, Point, Polygon} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst nodes = new VectorSource({wrapX: false});\nconst nodesLayer = new VectorLayer({\n  source: nodes,\n  style: function (f) {\n    const style = new Style({\n      image: new CircleStyle({\n        radius: 8,\n        fill: new Fill({color: 'rgba(255, 0, 0, 0.2)'}),\n        stroke: new Stroke({color: 'red', width: 1}),\n      }),\n      text: new Text({\n        text: f.get('node').id.toString(),\n        fill: new Fill({color: 'red'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 3,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst edges = new VectorSource({wrapX: false});\nconst edgesLayer = new VectorLayer({\n  source: edges,\n  style: function (f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'blue',\n        width: 1,\n      }),\n      text: new Text({\n        text: f.get('edge').id.toString(),\n        fill: new Fill({color: 'blue'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst faces = new VectorSource({wrapX: false});\nconst facesLayer = new VectorLayer({\n  source: faces,\n  style: function (f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(0, 255, 0, 0.2)',\n      }),\n      text: new Text({\n        font: 'bold 12px sans-serif',\n        text: f.get('face').id.toString(),\n        fill: new Fill({color: 'green'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst map = new Map({\n  layers: [raster, facesLayer, edgesLayer, nodesLayer],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 16,\n  }),\n});\n\nconst topo = topolis.createTopology();\n\ntopo.on('addnode', nodeToFeature);\ntopo.on('removenode', function (e) {\n  removeElementFeature(nodes, e);\n});\ntopo.on('addedge', edgeToFeature);\ntopo.on('modedge', function (e) {\n  const feature = edges.getFeatureById(e.id);\n  feature.setGeometry(new LineString(e.coordinates));\n});\ntopo.on('removeedge', function (e) {\n  removeElementFeature(edges, e);\n});\ntopo.on('addface', faceToFeature);\ntopo.on('removeface', function (e) {\n  removeElementFeature(faces, e);\n});\n\nfunction removeElementFeature(source, element) {\n  const feature = source.getFeatureById(element.id);\n  source.removeFeature(feature);\n}\n\nfunction nodeToFeature(node) {\n  const feature = new Feature({\n    geometry: new Point(node.coordinate),\n    node: node,\n  });\n  feature.setId(node.id);\n  nodes.addFeature(feature);\n}\n\nfunction edgeToFeature(edge) {\n  const feature = new Feature({\n    geometry: new LineString(edge.coordinates),\n    edge: edge,\n  });\n  feature.setId(edge.id);\n  edges.addFeature(feature);\n}\n\nfunction faceToFeature(face) {\n  const coordinates = topo.getFaceGeometry(face);\n  const feature = new Feature({\n    geometry: new Polygon(coordinates),\n    face: face,\n  });\n  feature.setId(face.id);\n  faces.addFeature(feature);\n}\n\nfunction createNode(topo, coord) {\n  let node;\n  const existingEdge = topo.getEdgeByPoint(coord, 5)[0];\n  if (existingEdge) {\n    node = topo.modEdgeSplit(existingEdge, coord);\n  } else {\n    node = topo.addIsoNode(coord);\n  }\n  return node;\n}\n\nfunction onDrawend(e) {\n  const edgeGeom = e.feature.getGeometry().getCoordinates();\n  const startCoord = edgeGeom[0];\n  const endCoord = edgeGeom[edgeGeom.length - 1];\n  let start, end;\n  try {\n    start = topo.getNodeByPoint(startCoord);\n    end = topo.getNodeByPoint(endCoord);\n    const edgesAtStart = topo.getEdgeByPoint(startCoord, 5);\n    const edgesAtEnd = topo.getEdgeByPoint(endCoord, 5);\n    const crossing = topo.getEdgesByLine(edgeGeom);\n    if (\n      crossing.length === 1 &&\n      !start &&\n      !end &&\n      edgesAtStart.length === 0 &&\n      edgesAtEnd.length === 0\n    ) {\n      topo.remEdgeNewFace(crossing[0]);\n      start = crossing[0].start;\n      if (start.face) {\n        topo.removeIsoNode(start);\n      }\n      end = crossing[0].end;\n      if (end.face) {\n        topo.removeIsoNode(end);\n      }\n      return;\n    }\n    if (!start) {\n      start = createNode(topo, startCoord);\n      edgeGeom[0] = start.coordinate;\n    }\n    if (!end) {\n      end = createNode(topo, endCoord);\n      edgeGeom[edgeGeom.length - 1] = end.coordinate;\n    }\n    topo.addEdgeNewFaces(start, end, edgeGeom);\n  } catch (e) {\n    toastr.warning(e.toString());\n  }\n}\n\nconst draw = new Draw({\n  type: 'LineString',\n});\ndraw.on('drawend', onDrawend);\nmap.addInteraction(draw);\nconst snap = new Snap({\n  source: edges,\n});\nmap.addInteraction(snap);\nmap.addControl(new MousePosition());\n"],"names":["raster","TileLayer","source","OSM","nodes","VectorSource","wrapX","nodesLayer","VectorLayer","style","f","Style","image","CircleStyle","radius","fill","Fill","color","stroke","Stroke","width","text","Text","get","id","toString","edges","edgesLayer","faces","facesLayer","font","map","Map","layers","target","view","View","center","zoom","topo","topolis","createTopology","removeElementFeature","element","feature","getFeatureById","removeFeature","createNode","coord","node","existingEdge","getEdgeByPoint","modEdgeSplit","addIsoNode","on","Feature","geometry","Point","coordinate","setId","addFeature","e","edge","LineString","coordinates","setGeometry","face","getFaceGeometry","Polygon","draw","Draw","type","edgeGeom","getGeometry","getCoordinates","startCoord","endCoord","length","start","end","getNodeByPoint","edgesAtStart","edgesAtEnd","crossing","getEdgesByLine","remEdgeNewFace","removeIsoNode","addEdgeNewFaces","toastr","warning","addInteraction","snap","Snap","addControl","MousePosition"],"sourceRoot":""}